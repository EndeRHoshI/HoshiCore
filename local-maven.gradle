apply plugin: 'maven-publish'

def artifactGroup = 'com.hoshi.lib' // hoshi 依赖仓库，所以直接命名为 lib
def artifactBuildId = 'hoshi-core'
def artifactVersion = '0.0.7' // 发布的版本，快照版本加上 -SNAPSHOT
def libraryName = 'core'

// 在目录下读取属性文件，然后取得文件中的属性
def mavenProperties = new Properties()
file("../local-maven.properties").withInputStream { mavenProperties.load(it) }

def mavenAuthorPrefix = mavenProperties.getProperty("author-prefix")
def mavenArtifactVersion = readMavenArtifactVersion(mavenAuthorPrefix, artifactVersion)

// 用来读取版本的，authorPrefix -> 作者前缀，artifactVersion -> 版本号
private static String readMavenArtifactVersion(String authorPrefix, String artifactVersion) {
    def suffixSnapshot = "SNAPSHOT"

    if (!artifactVersion.endsWith(suffixSnapshot) || authorPrefix == null || authorPrefix.isEmpty()) {
        // 如果版本号不是快照版本号，或者作者前缀为空，直接返回版本号
        return artifactVersion
    } else {
        // 否则返回
        return artifactVersion.replace(suffixSnapshot, authorPrefix + "-" + suffixSnapshot)
    }
}

// 可能是源码地址?
task sourceJar(type: Jar) {
    from "../$libraryName/src/main/java"
    from "../$libraryName/src/main/kotlin"
    classifier "sources"
}

publishing {
    publications {
        aar(MavenPublication) { // 这个 aar 似乎只是个命名
            groupId artifactGroup
            artifactId artifactBuildId
            version mavenArtifactVersion
            artifact(sourceJar)
            artifact "../$libraryName/build/outputs/aar/$libraryName-release.aar"
            // publication 不知道我们的依赖关系，所以我们必须手动将它们添加到 pom，如果没有以下代码，则 lib 的依赖不能打进包里，导致缺失
            // The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    if (dp.version != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)

                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
            }
        }
    }
}